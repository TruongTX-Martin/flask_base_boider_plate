# based on: https://dev.to/jonatasbaldin/a-recipe-for-poetry-and-circleci-1bj6
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
  slack: circleci/slack@3.4.2

jobs:

  # Building and testing the project
  # Useful when a PR is open, for example
  build-and-test:
    # Our environment, Python 3.8
    docker:
      - image: circleci/python:3.8

    environment:
      FLASK_ENV: test
      SECRET_KEY: ABSAAKSJCAKSJDHA
      APP_HOST: 0.0.0.0
      APP_PORT: 5000
      DB_USER: root
      DB_PASSWORD:
      DB_HOST: localhost
      DB_PORT: 3306
      DB_NAME: app_test
      AWS_KEY: ""
      AWS_SECRET: ""
      STORAGE_S3_REGION: ""
      STORAGE_S3_BUCKET_NAME: ""
      SESSION_TYPE: filesystem
      SESSION_FILE_DIR: local_sessions
      SESSION_FILE_THRESHOLD: 1000
      APP_ALLOW_WHITELIST_EMAIL_ALIAS: true

    # The steps for our build-and-test
    steps:
      # Get the code
      - checkout

      # Cache can be tricky at first, but this means
      # Please, restore my cache (what is actually on the cache will be defined later)
      # if the text key `deps-{{ checksum "poetry.lock" }}` changes (and it WILL change everytime poetry.lock is updated since we rely on its checksum)
      # and poetry.lock is updated every time we add a new dependency to our project
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}

      # Let's install the dependencies
      - run:
          name: Install Dependencies
          command: |
            poetry install

      # Save's the specified path as a cache. This is the path Poetry uses to install the dependencies
      # So if you don't install anything new, this folder won't change and the cache will be effective
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

#      # Another step, run flake8
#      - run:
#          name: Run flake8
#          command: |
#            poetry run flake8 .

      # Last step, runs our tests ommiting the dependencies path (so we don't take their coverage into account)
      # And send our coverage somewhere, in this case, coveralls
      - run:
          name: Run Pytest
          command: |
            poetry run pytest


  slack-status:
    parameters:
      environment:
        type: string
        default: dev
      tier:
        type: string
        default: app
    docker:
      - image: buildpack-deps:trusty
    steps:
      - slack/status:
          mentions: "channel"
          success_message: '[<< parameters.environment >>][<< parameters.tier >>] - Deploy $CIRCLE_BRANCH ${CIRCLE_SHA1} succeed!:beer: *) It may take few minutes for latest code to be updated. Please take a cup of coffee.'
          failure_message: '[<< parameters.environment >>][<< parameters.tier >>] - Deploy $CIRCLE_BRANCH ${CIRCLE_SHA1} failed.:scream:'
          webhook: "${SLACK_WEBHOOK_URL}"
          only_for_branches: 'release/dev,release/stg,release/production'
          channel: 'vn-prj-kaizen'

# In the workflows section, we specify when we want to run the jobs defined
workflows:
  version: 2

  # The build-and-test we will run EVERYTIME a piece of code changes
  # build-and-test-workflow:
  #   jobs:
  #     - build-and-test:
  #         filters:
  #           branches:
  #             ignore:
  #               - release/dev
  #               - release/stg
  #               - release/production

  deploy-development:
    jobs:
      - aws-ecr/build-and-push-image:
          name: "build-and-push-image"
          repo: student-app
          tag: "${CIRCLE_SHA1}"
          dockerfile: Dockerfile
          context:
            - flask-base
          filters:
            branches:
              only:
                - release/dev
      - aws-ecs/deploy-service-update:
          name: deploy-service-update-app
          context:
            - flask-base
          requires:
            - build-and-push-image
          family: student-task
          service-name: student-service
          cluster-name: student-cluster 
          container-image-name-updates: container=app,image-and-tag=${AWS_ECR_ACCOUNT_URL}/student-app:${CIRCLE_SHA1}
          filters:
            branches:
              only:
                - release/dev
      # - slack-status:
      #     context:
      #       - flask-base
      #     environment: development
      #     tier: app
      #     filters:
      #       branches:
      #         only:
      #           - release/dev
      #     requires:
      #       - deploy-service-update-app
